#!/usr/bin/perl
use warnings;
use strict;

my $filename = 'BroadJournalHeadings.csv';
my $additionalCss = 'additionalCss.css';

open(JS, '>', "../StaticFiles/js/common/authorship-helpers/etlPubFields.js") or die $!;
open(CSS, '>', "../StaticFiles/css/common/etlPubFields.css") or die $!;
open(BJH, '<', $filename) or die $!;
open(AC, '<', $additionalCss) or die $!;

printf JS "/*** DO NOT EDIT !! Generated by etlBJH.prl **/\n";
printf JS "/*** DO NOT EDIT !! Generated by etlBJH.prl **/\n";
printf CSS "/*** DO NOT EDIT !! Generated by etlBJH.prl **/\n";
printf CSS "/*** DO NOT EDIT !! Generated by etlBJH.prl **/\n";
printf CSS "/*** Any additions could go in a new stylesheet, **/\n";
printf CSS "/***         or in additionalCss.css **/\n";

my $jsPrefix = <<"there";

function getCleanFieldHeader(header) {
    let result = header.replace(/[^a-zA-Z0-9_]/g, "");
    return result;
}

// fieldAbbrev might not be same as field{Style,Filter}Class for ad hoc classes

there

print JS $jsPrefix;

while(<BJH>) {
    next if (/DisplayName,Abbreviation,Color/);

    my ($heading, $abbrev, $color) = split ',';
    $heading =~ s/[^a-zA-Z0-9_]//g;
    $color =~ s/\s//g;

    printf JS "gPerson.etlFieldAbbrevs[\'%s\'] = \'%s\';\n", $heading, $abbrev;
    printf JS "gPerson.etlFieldStyleClasses[\'%s\'] = \'%s\';\n", $heading, $abbrev;
    printf JS "gPerson.etlFieldFilterClasses[\'%s\'] = \'%s\';\n", $heading, $abbrev;

    printf CSS ".%s { border-color: #%s; }\n", $heading, $color;
    printf CSS ".%s[checked=\"checked\"] { background-color: #%s !important; }\n", $heading, $color;
}
print JS "\n";
printf CSS "\n";

while (<AC>) {
    print CSS
}

close(BJH);
close(JS);
close(CSS);